<?php

/**
 * @file
 * Implements functionality required to create and display an entity.
 */

/**
 * Implements hook_entity_info().
 */
function lesson_entity_entity_info() {
  $info['lesson_entity_basic'] = [
    'label' => t('Task'),
    'controller class' => 'EntityAPIController',
    'base table' => 'lesson_entity',
    'fieldable' => FALSE,
    'entity keys' => [
      'id' => 'id',
    ],
    'bundle keys' => [],
    'static cache' => TRUE,
    'bundles' => [],
    'view modes' => [
      'full' => [
        'label' => t('Full'),
        'custom settings' => FALSE,
      ],
    ],
  ];

  return $info;
}

/**
 * Implements hook_menu().
 */
function lesson_entity_menu() {
  $items['custom/lesson_entity'] = [
    'title' => 'Lesson Entity',
    'page callback' => 'lesson_entity_info_page',
    'access arguments' => ['view any lesson_entity_basic entity'],
  ];

  $items['admin/structure/lesson_entity_basic/manage'] = [
    'title' => 'Administer lesson_entity_basic entity type',
    'page callback' => 'lesson_entity_basic_list_entities',
    'access arguments' => ['administer lesson_entity_basic entities'],
  ];

  $items['admin/structure/lesson_entity_basic/manage/add'] = [
    'title' => 'Add a Lesson Entity Basic Entity',
    'page callback' => 'lesson_entity_basic_add',
    'access arguments' => ['create lesson_entity_basic entities'],
    'type' => MENU_LOCAL_ACTION,
  ];

  $items['admin/structure/lesson_entity_basic/manage/list'] = [
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ];

  $items['custom/lesson_entity/basic/%lesson_entity_basic'] = [
    'page callback' => 'lesson_entity_basic_show',
    'page arguments' => [3],
    'access arguments' => ['view any lesson_entity_basic entity'],
  ];

  $items['custom/lesson_entity/basic/%lesson_entity_basic/view'] = [
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ];

  $items['custom/lesson_entity/basic/%lesson_entity_basic/edit'] = [
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['lesson_entity_basic_form', 3],
    'access arguments' => ['edit any lesson_entity_basic entity'],
    'type' => MENU_LOCAL_TASK,
  ];

  $items['custom/lesson_entity/basic/add'] = [
    'title' => 'Add a Lesson Entity Basic Entity',
    'page callback' => 'lesson_entity_basic_add',
    'access arguments' => ['create lesson_entity_basic entities'],
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function lesson_entity_permission() {
  $permissions = [
    'administer lesson_entity_basic entities' => [
      'title' => t('Administer lesson_entity_basic entities'),
      'description' => t('permission for administering lesson_entity_basic entities'),
    ],
    'view any lesson_entity_basic entity' => [
      'title' => t('View any Lesson Entity Basic entity'),
      'description' => t('permission for viewing lesson_entity_basic entities'),
    ],
    'edit any lesson_entity_basic entity' => [
      'title' => t('Edit any Lesson Entity Basic entity'),
      'description' => t('permission for editing lesson_entity_basic entities'),
    ],
    'create lesson_entity_basic entities' => [
      'title' => t('Create Lesson Entity Basic Entities'),
      'description' => t('permission for creating lesson_entity_basic entities'),
    ],
  ];

  return $permissions;
}

/**
 * Implements hook_node_access().
 */
function lesson_entity_node_access($node, $op, $account) {
  $access = NODE_ACCESS_ALLOW;
  if ($node->type === 'article') {
    $result = db_select('lesson_entity','le')
      ->fields('le', ['uid'])
      ->condition('le.uid', $account->uid)
      ->execute();
    if ($result->rowCount() === 0) {
      $access = NODE_ACCESS_DENY;
    }
  }

  return $access;
}

/**
 * Fetches an object.
 */
function lesson_entity_basic_load($basic_id = NULL) {
  $basic_id = $basic_id ?? '';
  $basic = entity_load('lesson_entity_basic', [$basic_id]);

  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 */
function lesson_entity_basic_load_multiple() {
  $header = [
    ['data' => 'ID', 'field' => 'id'],
    ['data' => 'UID', 'field' => 'uid'],
    ['data' => 'Title', 'field' => 'title'],
    ['data' => 'Body', 'field' => 'body'],
    ['data' => 'type', 'field' => 'type'],
  ];
  $result = db_select('lesson_entity','le')
    ->fields('le', array('id','uid', 'title', 'body', 'type'))
    ->extend('PagerDefault')
    ->extend('TableSort')
    ->orderByHeader($header)
    ->limit(2)
    ->execute();

  return $result;
}

/**
 * Basic information for the page.
 */
function lesson_entity_info_page() {
  $content['preface'] = [
    '#type' => 'item',
    '#markup' => t('A simple example entity.'),
  ];
  if (user_access('administer lesson_entity_basic entities')) {
    $content['preface']['#markup'] = t('You can administer !link.',
      ['!link' => l(t('here'), 'admin/structure/lesson_entity_basic/manage')]
    );
  }
  $content['table'] = lesson_entity_basic_list_entities();
  $content['pager'] = [
    '#theme' => 'pager',
  ];

  return $content;
}

/**
 * Returns a render array with all lesson_entity_basic entities.
 */
function lesson_entity_basic_list_entities() {
  $content = [];
  $entities = lesson_entity_basic_load_multiple();
  $header = [
    ['data' => 'ID', 'field' => 'id'],
    ['data' => 'UID', 'field' => 'uid'],
    ['data' => 'Title', 'field' => 'title'],
    ['data' => 'Body', 'field' => 'body'],
    ['data' => 'type', 'field' => 'type'],
  ];

  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $rows[] = [
        'data' => [
          'id' => $entity->id,
          'uid' => $entity->uid,
          'title' => $entity->title,
          'body' => $entity->body,
          'type' => $entity->type,
        ],
      ];
    }
    $content['entity_table'] = [
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
    ];
  }
  else {
    $content[] = [
      '#type' => 'item',
      '#markup' => t('No lesson_entity_basic entities currently exist.'),
    ];
  }

  return $content;
}

/**
 * Menu callback to display an entity.
 */
function lesson_entity_basic_show($entity) {
  $header = [
    t('Entity Property'),
    t('Value'),
  ];
  $rows = [];
  foreach ($entity as $property => $value) {
    if ($property !== 'rdf_mapping') {
      $rows[] = [
        'data' => [$property, $value],
      ];
    }
  }

  return theme('table', $variables = [
    'header' => $header,
    'rows' => $rows,
    'caption' => t('Entity'),
  ]);
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function lesson_entity_basic_add() {
  $entity = entity_create('lesson_entity_basic', ['title' => '', 'body' => '', 'type' => '']);
  return drupal_get_form('lesson_entity_basic_form', $entity);
}

/**
 * Form function to create an entity_example_basic entity.
 */
function lesson_entity_basic_form($form, &$form_state, $entity) {
  $form['item_title'] = [
    '#type' => 'textfield',
    '#title' => t('Item Description'),
    '#required' => TRUE,
    '#default_value' => $entity->title,
  ];

  $form['item_body'] = [
    '#type' => 'textfield',
    '#title' => t('Item Body'),
    '#required' => TRUE,
    '#default_value' =>  $entity->body,
  ];

  $form['item_type'] = [
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => [
      1 => 1,
      2 => 2,
    ],
    '#default_value' =>  $entity->type,
  ];

  $form['basic_entity'] = [
    '#type' => 'value',
    '#value' => $entity,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  ];

  $form['delete'] = [
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => ['lesson_entity_basic_edit_delete'],
    '#weight' => 200,
  ];

  return $form;
}


/**
 * Form submit handler: Submits information from entity creation form.
 */
function lesson_entity_basic_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $entity_fields = $values['basic_entity'];
  $entity['title'] = $values['item_title'];
  $entity['body'] = $values['item_body'];
  $entity['type'] = $values['item_type'];
  $entity['uid'] = $GLOBALS['user']->uid;
  field_attach_submit('lesson_entity_basic', $entity_fields, $form, $form_state);
  $new_entity = entity_create('lesson_entity_basic', $entity);
  entity_save('lesson_entity_basic', $new_entity);
}

/**
 * Removes entity.
 */
function lesson_entity_basic_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  entity_delete('lesson_entity_basic', $entity->id);
  drupal_set_message(t('The entity %item_title (ID %id) has been deleted',
      ['%item_title' => $entity->title, '%id' => $entity->id])
  );
  $form_state['redirect'] = 'custom/lesson_entity';
}
